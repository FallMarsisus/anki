{
    "__type__": "Deck",
    "children": [
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "c9109374-946f-11f0-927a-f9019d2f4e20",
            "deck_config_uuid": "48464447-0c00-11f0-a2c6-505a65e9873c",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [],
            "name": "Langages et automates",
            "newLimit": null,
            "newLimitToday": null,
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "Déf alphabet",
                        "Ensemble non vide de symboles/lettres/caractères"
                    ],
                    "guid": "QQ#0NKC_,|",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Def mot de longueur n<br>Notation ensemble des mots, ensemble des mots de longueur non nulle, mot vide",
                        "Suite finie de n lettres de l'alphabet<br>\\(\\Sigma^*, \\Sigma^+, \\varepsilon\\)"
                    ],
                    "guid": "DO?cW},_>1",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Def langage",
                        "Sous-ensemble de&nbsp;\\(\\Sigma^*\\)"
                    ],
                    "guid": "v/UY<Ln^Xq",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Définition union, concaténation, étoile de Kleene pour des langages",
                        "-&nbsp;\\(L_1 \\cup L_2 = \\{ u \\in \\Sigma^*, u \\in L_1 \\text{ ou } u \\in L_2 \\}\\)<br>-&nbsp;\\(L_1L_2 = \\{ u.v, (u,v) \\in L_1 \\times L_2&nbsp;\\}\\)<br>-&nbsp;\\(L^* = \\bigcup_{n \\in \\mathbb N} L^n\\)"
                    ],
                    "guid": "tqSi4uG@CL",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Un AFD&nbsp;\\(\\mathcal A\\)&nbsp;est un quintuplet&nbsp;\\((\\Sigma, Q, q_0, F , \\delta)\\)&nbsp;où :<br>- Q est {{c1::l'ensemble des états}}<br>-&nbsp;\\(q_0 \\in Q\\)&nbsp;est {{c1::l'état initial}}<br>-&nbsp;\\(F \\subset Q\\)&nbsp;est&nbsp;{{c1::l'ensemble des états finals}}<br>-&nbsp;\\(\\delta\\)&nbsp;est {{c1::la fonction de transition&nbsp;\\(Q \\times \\Sigma \\rightarrow Q\\)}}",
                        ""
                    ],
                    "guid": "AZy3Lewbf^",
                    "note_model_uuid": "74f796e2-19f5-11f0-9ce0-505a65e9873c",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "\\(\\delta^* (q, uv) = \\)",
                        "\\(\\delta^* (\\delta* (q, u), v)\\)"
                    ],
                    "guid": "vR^}tN1W4F",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Définition état accessible, co-accessible, utile",
                        "Un état q est dit :<br>- accessible si il existe u tel que&nbsp;\\(\\delta^*(q_0,u) = q\\)<br>- co-accessible si il existe u tel que&nbsp;\\(\\delta^*(q,u) \\in F\\)<br>- utile si il est accessible et co-accessible"
                    ],
                    "guid": "d*{2AX#LU5",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Un automate émondé reconnaît...",
                        "... le même langage que l'automate d'origine"
                    ],
                    "guid": "yyPbfCtLt_",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Les langages reconnus par AFND...",
                        "...sont les mêmes que ceux reconnus par AFD.<br><br>Preuve : construction de l'automate des parties pouis récurrence pour prouver chaque inclusion"
                    ],
                    "guid": "e{W1iXESMs",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Lemme de l'étoile",
                        "L langage reconnu par un automate à n états.<br>Pour tout&nbsp;\\(u \\in L\\)&nbsp;tel que&nbsp;\\(| u | \\geq n\\), il existe x, y, z tels que u = xyz avec :<br>-&nbsp;\\(| xy |&nbsp;\\leq n\\)<br>-&nbsp;\\(y \\neq \\varepsilon\\)<br>-&nbsp;\\(\\mathcal L(xy*z) \\in L\\)"
                    ],
                    "guid": "qF&3bf.W<V",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Def automate asynchrone",
                        "automate qui a des&nbsp;\\(\\varepsilon\\)-transitions<br>Reconnaissent les mêmes langages que les AFD"
                    ],
                    "guid": "GLjrbgBsj!",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "L'ensemble des langages reconnaissables est stable par : (:3) (il y en a 7 mais 3 nécessaires)",
                        "Nécessaires :<br>- Union<br>- Complémentaire<br>- Concaténation<br><br>Autres :<br>- Intersection<br>- Différence ensembliste<br>- Différence symétrique&nbsp;\\(( A \\cup B \\ \\backslash \\ A \\cap B, \\text{ ou } (A \\cap \\bar B) \\cup (B \\cap \\bar A)\\)<br>- étoile de Kleene"
                    ],
                    "guid": "JTP/MW?Ahw",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Def langage local",
                        "S'il existe&nbsp;\\(R \\subset \\Sigma, S \\subset \\Sigma, F \\subset \\Sigma^2\\)&nbsp;tels que pour tout mot non vide w, w est dans L ssi :<br>- la première lettre de w est dans R<br>- la dernière lettre de w est dans S<br>- Aucun facteur de longueur 2 de w n'est dans&nbsp;\\(\\bar F\\)<br><br>ie :<br>\\(L \\backslash \\{ \\varepsilon \\} = (R \\Sigma^* \\cup \\Sigma^*S) \\backslash (\\Sigma^* \\bar F \\Sigma^*)\\)"
                    ],
                    "guid": "iok_kw*9AF",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "L'ensemble des langages locaux est stable par : (4 dont 2 avec une condition)",
                        "- intersection<br>- étoile de Kleene<br>- union et concaténation sur l'union des alphabets si les alphabets sont disjoints"
                    ],
                    "guid": "f,{$9@(eAm",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Théorème de Kleene",
                        "Les langages reconnaissables sont exactement les langages réguliers"
                    ],
                    "guid": "IR1,Cu5ePy",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Algorithme de Berry-Sethi (créer un automate à partir d'une expression régulière e)",
                        "- transformer e en une expression régulière e' linéaire en ajoutant des indices aux occurences des symboles<br>- créer l'automate local associé à e' (et c'est là que je me rends compte que j'ai pas encore tapé cette méthode)<br>- remettre les symboles sans les indices, l'automate peut donc ne pas être déterministe"
                    ],
                    "guid": "egktI:t[`9",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Créer un automate local à partir d'un langage local L (ensembles&nbsp;\\(R_L, S_L, F_L\\))",
                        "-&nbsp;\\(Q = \\{ q_0&nbsp;\\} \\cup \\{ q_a, a \\in \\Sigma&nbsp;\\}\\)&nbsp;avec q0 un état supplémentaire défini comme état initial<br>-&nbsp;\\(\\forall a \\in R_L, \\ \\delta(q_0,a) = a\\)<br>-&nbsp;\\(\\forall a,b, \\ ab \\in F_L, \\delta (q_a,b) = q_b\\)<br>-&nbsp;\\(F = \\left\\{ \\{ q_0 \\} \\cup \\{q_a, a \\in S \\} \\text{ si } \\varepsilon \\in L \\atop \\{&nbsp;q_a, a \\in S\\} \\text{ sinon} \\right.\\)"
                    ],
                    "guid": "Q2BQ8Q?0|-",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Def automate généralisé",
                        "Automate sur l'alphabet des expressions générales de&nbsp;\\(\\Sigma\\)"
                    ],
                    "guid": "b?a<{gV9SK",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                }
            ],
            "reviewLimit": null,
            "reviewLimitToday": null
        },
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "6233a07e-8b4b-11f0-a3dc-b951edacb484",
            "deck_config_uuid": "f47a8eb8-0b10-11f0-b3aa-00163ec6fa00",
            "desc": "",
            "desiredRetention": null,
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [],
            "name": "Union FInd",
            "newLimit": null,
            "newLimitToday": null,
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "Implémentation efficace d'une structure union-find&nbsp;",
                        "Représentation filiale, arbres d'arité quelconque pour relier chaque valeur à une valeur parente, les valeurs s'associant à elles-mêmes sont donc le \"haut\" des branches"
                    ],
                    "guid": "6~H3[2eF+",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Utilité de la structure union-find",
                        "Représenter des données partitionnées, on doit :&nbsp;<br>- Créer une structure vide<br>- Ajouter une nouvelle partie (singleton)<br>- Unir deux parties existantes<br>- Trouver la partie à laquelle appartient une valeur&nbsp;"
                    ],
                    "guid": "Kqu/+Gsu]Q",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Complexité pire cas d'une union find bien implémentée :&nbsp;",
                        "Sans optimisaiton ; linéaire en la hauteur max des arbres de la représentation filiale,&nbsp;<br>Avec l'optimisation;&nbsp;\\(\\Theta(\\alpha(n))\\)&nbsp;avec&nbsp;\\(\\alpha \\)&nbsp;la fonction inverse de Ackerman (croit TRES lentement)"
                    ],
                    "guid": "jnG.ZsYQe$",
                    "note_model_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
                    "tags": []
                }
            ],
            "reviewLimit": null,
            "reviewLimitToday": null
        }
    ],
    "crowdanki_uuid": "6233926e-8b4b-11f0-a3dc-b951edacb484",
    "deck_config_uuid": "f47a8eb8-0b10-11f0-b3aa-00163ec6fa00",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "answerAction": 0,
            "autoplay": true,
            "buryInterdayLearning": false,
            "crowdanki_uuid": "f47a8eb8-0b10-11f0-b3aa-00163ec6fa00",
            "desiredRetention": 0.9,
            "dyn": false,
            "easyDaysPercentages": [
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0
            ],
            "fsrsParams5": [],
            "fsrsParams6": [],
            "fsrsWeights": [],
            "ignoreRevlogsBeforeDate": "",
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Par défaut",
            "new": {
                "bury": false,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 1400,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 10
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "questionAction": 0,
            "replayq": true,
            "rev": {
                "bury": false,
                "ease4": 1.2,
                "hardFactor": 1.1,
                "ivlFct": 1.0,
                "maxIvl": 180,
                "perDay": 100
            },
            "reviewOrder": 0,
            "secondsToShowAnswer": 0.0,
            "secondsToShowQuestion": 0.0,
            "sm2Retention": 0.9,
            "stopTimerOnAnswer": true,
            "timer": 1,
            "waitForAudio": false,
            "weightSearch": ""
        },
        {
            "__type__": "DeckConfig",
            "answerAction": 0,
            "autoplay": true,
            "buryInterdayLearning": false,
            "crowdanki_uuid": "48464447-0c00-11f0-a2c6-505a65e9873c",
            "desiredRetention": 0.9,
            "dyn": false,
            "easyDaysPercentages": [
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0
            ],
            "fsrsParams5": [],
            "fsrsParams6": [],
            "fsrsWeights": [],
            "ignoreRevlogsBeforeDate": "",
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Par défaut",
            "new": {
                "bury": false,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 10
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "questionAction": 0,
            "replayq": true,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 16,
                "perDay": 130
            },
            "reviewOrder": 0,
            "secondsToShowAnswer": 0.0,
            "secondsToShowQuestion": 0.0,
            "sm2Retention": 0.9,
            "stopTimerOnAnswer": false,
            "timer": 0,
            "waitForAudio": true,
            "weightSearch": ""
        }
    ],
    "desc": "",
    "desiredRetention": null,
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "media_files": [],
    "name": "Informatique Spé",
    "newLimit": null,
    "newLimitToday": null,
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "12ec7e48-251e-11f0-93e7-00163ec6fa00",
            "css": ".card {\n    font-family: arial;\n    font-size: 20px;\n    text-align: center;\n    color: black;\n    background-color: white;\n}\n",
            "flds": [
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": 2887224638033873027,
                    "name": "Recto",
                    "ord": 0,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": null
                },
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": -7793164370799427585,
                    "name": "Verso",
                    "ord": 1,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": null
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Basique",
            "originalId": 1743079208597,
            "originalStockKind": 1,
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n{{Verso}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "id": -4005149872133082135,
                    "name": "Carte 1",
                    "ord": 0,
                    "qfmt": "{{Recto}}"
                }
            ],
            "type": 0
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "74f796e2-19f5-11f0-9ce0-505a65e9873c",
            "css": ".card {\n    font-family: arial;\n    font-size: 20px;\n    text-align: center;\n    color: black;\n    background-color: white;\n}\n.cloze {\n    font-weight: bold;\n    color: blue;\n}\n.nightMode .cloze {\n    color: lightblue;\n}\n",
            "flds": [
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": 917761237776734798,
                    "name": "Texte",
                    "ord": 0,
                    "plainText": false,
                    "preventDeletion": true,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": 0
                },
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": 2795282707234633529,
                    "name": "Verso Extra",
                    "ord": 1,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": 1
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Texte à trous",
            "originalStockKind": 5,
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "{{cloze:Texte}}<br>\n{{Verso Extra}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "id": -1362982061134984816,
                    "name": "Texte à trous",
                    "ord": 0,
                    "qfmt": "{{cloze:Texte}}"
                }
            ],
            "type": 1
        }
    ],
    "notes": [],
    "reviewLimit": null,
    "reviewLimitToday": null
}